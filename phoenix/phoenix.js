// Generated by CoffeeScript 2.2.2
(function() {
  /*
  Phoenix.app config

  Resize windows based on half size or golden ratio
  */
  var FIBA_HEIGHT, FIBA_WIDTH, FIBB_HEIGHT, FIBB_WIDTH, FULL_HEIGHT, FULL_WIDTH, GRID_A_RATIO, GRID_B_RATIO, GRID_HEIGHT, GRID_RATIO, GRID_WIDTH, HALF_HEIGHT, HALF_WIDTH, MARGIN_X, MARGIN_Y, ctrlAltCmd, key_binding, keys, lastFrames, shiftCmd;

  // Preferences
  Phoenix.set({
    daemon: false,
    openAtLogin: true
  });

  // Grid Settings
  MARGIN_X = 3;

  MARGIN_Y = 3;

  GRID_WIDTH = 21;

  GRID_HEIGHT = 21;

  GRID_RATIO = 1.618;

  GRID_A_RATIO = 1 / GRID_RATIO;

  GRID_B_RATIO = 1 - GRID_A_RATIO;

  HALF_WIDTH = Math.round(0.5 * GRID_WIDTH);

  HALF_HEIGHT = Math.round(0.5 * GRID_HEIGHT);

  FULL_WIDTH = 1 * GRID_WIDTH;

  FULL_HEIGHT = 1 * GRID_HEIGHT;

  FIBA_WIDTH = Math.round(GRID_A_RATIO * GRID_WIDTH);

  FIBA_HEIGHT = Math.round(GRID_A_RATIO * GRID_HEIGHT);

  FIBB_WIDTH = Math.round(GRID_B_RATIO * GRID_WIDTH);

  FIBB_HEIGHT = Math.round(GRID_B_RATIO * GRID_HEIGHT);

  // helpers
  Window.prototype.screenRect = function(screen) {
    return (screen != null ? screen.flippedVisibleFrame() : void 0) || this.screen().flippedVisibleFrame();
  };

  Window.prototype.fullGridFrame = function() {
    return this.calculateGrid({
      y: 0,
      x: 0,
      width: 1,
      height: 1
    });
  };

  Window.prototype.borderedFullGridFrame = function(border) {
    return this.calculateGrid({
      x: border / GRID_WIDTH,
      y: border / GRID_HEIGHT,
      width: (GRID_WIDTH - (2.0 * border)) / GRID_WIDTH,
      height: (GRID_HEIGHT - (2.0 * border)) / GRID_HEIGHT
    });
  };

  // Window positions
  Window.prototype.gridCurrentPosition = function() {
    return {
      x: Math.round(this.frame().x / this.screenRect().width * GRID_WIDTH),
      y: Math.round(this.frame().y / this.screenRect().height * GRID_HEIGHT),
      width: Math.round(this.frame().width / this.screenRect().width * GRID_WIDTH),
      height: Math.round(this.frame().height / this.screenRect().height * GRID_HEIGHT)
    };
  };

  Window.prototype.calculateGrid = function({x, y, width, height}) {
    return {
      x: Math.round(x * this.screenRect().width) + MARGIN_X + this.screenRect().x,
      y: Math.round(y * this.screenRect().height) + MARGIN_Y + this.screenRect().y,
      width: Math.round(width * this.screenRect().width) - 2.0 * MARGIN_X,
      height: Math.round(height * this.screenRect().height) - 2.0 * MARGIN_Y
    };
  };

  Window.prototype.toGrid = function({x, y, width, height}) {
    var rect;
    rect = this.calculateGrid({x, y, width, height});
    return this.setFrame(rect);
  };

  // Window popout/focus
  lastFrames = {};

  Window.prototype.uid = function() {
    return `${this.app().name()}::${this.title()}`;
  };

  Window.prototype.rememberFrame = function() {
    return lastFrames[this.uid()] = this.frame();
  };

  Window.prototype.forgetFrame = function() {
    return delete lastFrames[this.uid()];
  };

  // Window positions
  Window.prototype.toggleFullScreen = function() {
    if (!_.isEqual(this.frame(), this.fullGridFrame())) {
      this.rememberFrame();
      return this.toGrid({
        x: 0,
        y: 0,
        width: 1,
        height: 1
      });
    } else if (lastFrames[this.uid()]) {
      this.setFrame(lastFrames[this.uid()]);
      return this.forgetFrame();
    }
  };

  Window.prototype.toggleBorderedScreen = function(border) {
    if (!_.isEqual(this.frame(), this.borderedFullGridFrame(border))) {
      this.rememberFrame();
      return this.toGrid({
        x: border / GRID_WIDTH,
        y: border / GRID_HEIGHT,
        width: (GRID_WIDTH - (2.0 * border)) / GRID_WIDTH,
        height: (GRID_HEIGHT - (2.0 * border)) / GRID_HEIGHT
      });
    } else if (lastFrames[this.uid()]) {
      this.setFrame(lastFrames[this.uid()]);
      return this.forgetFrame();
    }
  };

  // Window resizing
  Window.prototype.resizeWindow = function(direction) {
    var current_position, new_frame, new_height, new_width, new_x, new_y;
    current_position = this.gridCurrentPosition();
    new_x = current_position.x;
    new_y = current_position.y;
    new_width = current_position.width;
    new_height = current_position.height;
    if (direction === 'left') {
      new_height = FULL_HEIGHT;
      new_y = 0;
      if (current_position.width !== HALF_WIDTH) {
        new_width = HALF_WIDTH;
        new_x = 0;
      } else {
        new_width = FIBA_WIDTH;
        new_x = 0;
      }
    } else if (direction === 'right') {
      new_height = FULL_HEIGHT;
      new_y = 0;
      if (current_position.width !== FIBB_WIDTH) {
        new_width = FIBB_WIDTH;
        new_x = FIBA_WIDTH;
      } else {
        new_width = FIBA_WIDTH + 1; // prefer slightly larger
        new_x = FIBB_WIDTH - 1;
      }
    } else if (direction === 'top') {
      new_height = FIBA_HEIGHT;
      new_y = 0;
    } else if (direction === 'bottom') {
      new_height = FIBB_HEIGHT;
      new_y = FIBA_HEIGHT;
    }
    new_frame = {
      x: new_x !== 0 ? new_x / GRID_WIDTH : 0,
      y: new_y !== 0 ? new_y / GRID_HEIGHT : 0,
      width: new_width / GRID_WIDTH,
      height: new_height / GRID_HEIGHT
    };
    return this.toGrid(new_frame);
  };

  // toggle through stacked windows
  Window.prototype.toggleStackedWindows = function() {
    var allSameVisible, stackedWindows, topMostWindow;
    stackedWindows = [];
    allSameVisible = _.filter(Window.recent(), (win) => {
      return _.isEqual(this.frame(), win.frame());
    });
    topMostWindow = allSameVisible.pop();
    return topMostWindow.focus();
  };

  // Bindings
  keys = [];

  key_binding = function(key, modifier, fn) {
    return keys.push(Key.on(key, modifier, fn));
  };

  // command keys
  shiftCmd = 'shift+cmd'.split('+');

  ctrlAltCmd = 'ctrl+alt+cmd'.split('+');

  // resizing
  key_binding('H', ctrlAltCmd, function() {
    return Window.focused().resizeWindow('left');
  });

  key_binding('L', ctrlAltCmd, function() {
    return Window.focused().resizeWindow('right');
  });

  key_binding('K', ctrlAltCmd, function() {
    return Window.focused().resizeWindow('top');
  });

  key_binding('J', ctrlAltCmd, function() {
    return Window.focused().resizeWindow('bottom');
  });

  key_binding('F', ctrlAltCmd, function() {
    return Window.focused().toggleFullScreen();
  });

  key_binding('A', ctrlAltCmd, function() {
    return Window.focused().toggleBorderedScreen(0.5);
  });

  // toggle stacked windows
  key_binding('`', ctrlAltCmd, function() {
    return Window.focused().toggleStackedWindows();
  });

  // focus to direction
  key_binding('H', shiftCmd, function() {
    return Window.focused().focusClosestNeighbour('west');
  });

  key_binding('L', shiftCmd, function() {
    return Window.focused().focusClosestNeighbour('east');
  });

}).call(this);
