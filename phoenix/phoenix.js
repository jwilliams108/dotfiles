// Generated by CoffeeScript 1.10.0

/*
Phoenix.app config

Resize windows based on half size or golden ratio
 */

(function() {
  var GRID_A_RATIO, GRID_B_RATIO, GRID_HEIGHT, GRID_RATIO, GRID_WIDTH, MARGIN, _lastFrames, ctrlAltCmd, debug, key_binding, shiftCmd;

  MARGIN = 3;

  GRID_RATIO = 1.618;

  GRID_A_RATIO = 1 / GRID_RATIO;

  GRID_B_RATIO = 1 - GRID_A_RATIO;

  GRID_WIDTH = 21;

  GRID_HEIGHT = 21;

  debug = function(message) {
    return api.alert(message, 10);
  };

  Window.prototype._calculateGrid = function(x, y, width, height) {
    var screen;
    screen = this.screen().frameWithoutDockOrMenu();
    return {
      x: Math.round(x * screen.width) + MARGIN + screen.x,
      y: Math.round(y * screen.height) + MARGIN + screen.y,
      width: Math.round(width * screen.width) - (2.0 * MARGIN),
      height: Math.round(height * screen.height) - (2.0 * MARGIN)
    };
  };

  Window.prototype._toGrid = function(x, y, width, height) {
    var rect;
    rect = this._calculateGrid(x, y, width, height);
    this.setFrame(rect);
    return this;
  };

  Window.prototype._gridCurrentPosition = function() {
    var frame, screen, x, y;
    screen = this.screen().frameWithoutDockOrMenu();
    frame = this.frame();
    x = frame.x;
    y = frame.y;
    if (x !== 0) {
      x = Math.round(x / screen.width * GRID_WIDTH);
    }
    if (y !== 0) {
      y = Math.round(y / screen.height * GRID_WIDTH);
    }
    return {
      x: x,
      y: y,
      width: Math.round(frame.width / screen.width * GRID_WIDTH),
      height: Math.round(frame.height / screen.height * GRID_HEIGHT)
    };
  };

  Window.prototype.topRight = function() {
    var frame;
    frame = this.frame();
    return {
      x: frame.x + f.width,
      y: frame.y
    };
  };

  Window.prototype.toLeft = function() {
    var p;
    p = this.topLeft();
    return _.chain(this.windowsToWest()).filter(function(win) {
      return win.topLeft().x < p.x - 10;
    }).value();
  };

  Window.prototype.toRight = function() {
    var p;
    p = this.topRight();
    return _.chain(this.windowsToEast()).filter(function(win) {
      return win.topRight().x > p.x + 10;
    }).value();
  };

  Window.sortByMostRecent = function(windows) {
    var allVisible;
    allVisible = Window.visibleWindowsMostRecentFirst();
    return _.chain(windows).sortBy(function(win) {
      return _.map(allVisible, function(w) {
        return w.title();
      }).indexOf(win.title());
    }).value();
  };

  _lastFrames = {};

  Window.prototype._rememberFrame = function() {
    return _lastFrames[this] = this.frame();
  };

  Window.prototype._forgetFrame = function() {
    return delete _lastFrames[this];
  };

  Window.prototype.toggleBorderedScreen = function(border) {
    var fullFrame;
    fullFrame = this._calculateGrid(border / GRID_WIDTH, border / GRID_HEIGHT, (GRID_WIDTH - (2.0 * border)) / GRID_WIDTH, (GRID_HEIGHT - (2.0 * border)) / GRID_HEIGHT);
    if (!_.isEqual(this.frame(), fullFrame)) {
      this._rememberFrame();
      return this._toGrid(border / GRID_WIDTH, border / GRID_HEIGHT, (GRID_WIDTH - (2.0 * border)) / GRID_WIDTH, (GRID_HEIGHT - (2.0 * border)) / GRID_HEIGHT);
    } else if (_lastFrames[this]) {
      this.setFrame(_lastFrames[this]);
      return this._forgetFrame();
    }
  };

  Window.prototype.toggleFullScreen = function() {
    var fullFrame;
    fullFrame = this._calculateGrid(0, 0, 1, 1);
    if (!_.isEqual(this.frame(), fullFrame)) {
      this._rememberFrame();
      return this._toGrid(0, 0, 1, 1);
    } else if (_lastFrames[this]) {
      this.setFrame(_lastFrames[this]);
      return this._forgetFrame();
    }
  };

  Window.prototype.resizeWindow = function(direction) {
    var current_position, fiba_height, fiba_width, fibb_height, fibb_width, full_height, full_width, half_height, half_width, new_height, new_width, new_x, new_y;
    half_width = Math.round(0.5 * GRID_WIDTH);
    half_height = Math.round(0.5 * GRID_HEIGHT);
    full_width = 1 * GRID_WIDTH;
    full_height = 1 * GRID_HEIGHT;
    fiba_width = Math.round(GRID_A_RATIO * GRID_WIDTH);
    fiba_height = Math.round(GRID_A_RATIO * GRID_HEIGHT);
    fibb_width = Math.round(GRID_B_RATIO * GRID_WIDTH);
    fibb_height = Math.round(GRID_B_RATIO * GRID_HEIGHT);
    current_position = this._gridCurrentPosition();
    new_x = current_position.x;
    new_y = current_position.y;
    new_width = current_position.width;
    new_height = current_position.height;
    if (direction === 'left') {
      if (current_position.width === half_width && current_position.height !== full_height) {
        new_width = half_width;
        new_x = 0;
        new_height = full_height;
        new_y = 0;
      } else if (current_position.width === fiba_width && current_position.height !== full_height) {
        new_width = fiba_width;
        new_x = 0;
        new_height = full_height;
        new_y = 0;
      } else if (current_position.width === fibb_width && current_position.height !== full_height) {
        new_width = fiba_width;
        new_x = 0;
        new_height = full_height;
        new_y = 0;
      } else if ((current_position.width === half_width && current_position.x === 0) || current_position.width === fibb_width) {
        new_width = fiba_width;
        new_x = 0;
        new_height = full_height;
        new_y = 0;
      } else {
        new_width = half_width;
        new_x = 0;
        new_height = full_height;
        new_y = 0;
      }
    } else if (direction === 'right') {
      if (current_position.width === half_width && current_position.height !== full_height) {
        new_width = half_width;
        new_x = half_width;
        new_height = full_height;
        new_y = 0;
      } else if (current_position.width === fibb_width && current_position.height !== full_height) {
        new_width = fibb_width;
        new_x = fiba_width;
        new_height = full_height;
        new_y = 0;
      } else if (current_position.width === fibb_width || (current_position.width === half_width && current_position.x === 0)) {
        new_width = half_width - 1;
        new_x = half_width;
        new_height = full_height;
        new_y = 0;
      } else if (current_position.width === (half_width - 1) && current_position.x === half_width) {
        new_width = fiba_width;
        new_x = fibb_width;
        new_height = full_height;
        new_y = 0;
      } else if (current_position.width === fiba_width && current_position.x === fibb_width) {
        new_width = 17;
        new_x = GRID_WIDTH - new_width;
        new_height = full_height;
        new_y = 0;
      } else {
        new_width = fibb_width;
        new_x = fiba_width;
        new_height = full_height;
        new_y = 0;
      }
    } else if (direction === 'top') {
      new_height = fiba_height;
      new_y = 0;
    } else if (direction === 'bottom') {
      new_height = fibb_height;
      new_y = fiba_height;
    }
    if (new_x !== 0) {
      new_x = new_x / GRID_WIDTH;
    }
    if (new_y !== 0) {
      new_y = new_y / GRID_HEIGHT;
    }
    return this._toGrid(new_x, new_y, new_width / GRID_WIDTH, new_height / GRID_HEIGHT);
  };

  Window.prototype.toggleStackedWindows = function() {
    var allVisible, frame, stackedWindows, topMostWindow;
    frame = this.frame();
    stackedWindows = [];
    allVisible = Window.visibleWindowsMostRecentFirst();
    _.each(allVisible, function(window) {
      if (_.isEqual(frame, window.frame())) {
        return stackedWindows.push(window);
      }
    });
    topMostWindow = stackedWindows.pop();
    return topMostWindow.focusWindow();
  };

  Window.prototype.focusToFrontLeft = function() {
    var sortedTargets, targets, topMostLeft, win;
    win = Window.focusedWindow();
    targets = win.windowsToWest();
    sortedTargets = Window.sortByMostRecent(targets);
    if (sortedTargets.length) {
      topMostLeft = sortedTargets[0];
      return topMostLeft.focusWindow();
    }
  };

  Window.prototype.focusToFrontRight = function() {
    var sortedTargets, targets, topMostRight, win;
    win = Window.focusedWindow();
    targets = win.windowsToEast();
    sortedTargets = Window.sortByMostRecent(targets);
    if (sortedTargets.length) {
      topMostRight = sortedTargets[0];
      return topMostRight.focusWindow();
    }
  };

  Window.prototype;

  key_binding = function(key, modifier, fn) {
    return api.bind(key, modifier, fn);
  };

  shiftCmd = 'shift+cmd'.split('+');

  ctrlAltCmd = 'ctrl+alt+cmd'.split('+');

  key_binding('H', ctrlAltCmd, function() {
    return Window.focusedWindow().resizeWindow('left');
  });

  key_binding('L', ctrlAltCmd, function() {
    return Window.focusedWindow().resizeWindow('right');
  });

  key_binding('K', ctrlAltCmd, function() {
    return Window.focusedWindow().resizeWindow('top');
  });

  key_binding('J', ctrlAltCmd, function() {
    return Window.focusedWindow().resizeWindow('bottom');
  });

  key_binding('F', ctrlAltCmd, function() {
    return Window.focusedWindow().toggleFullScreen();
  });

  key_binding('A', ctrlAltCmd, function() {
    return Window.focusedWindow().toggleBorderedScreen(0.5);
  });

  key_binding('`', ctrlAltCmd, function() {
    return Window.focusedWindow().toggleStackedWindows();
  });

  key_binding('H', shiftCmd, function() {
    return Window.focusedWindow().focusToFrontLeft();
  });

  key_binding('L', shiftCmd, function() {
    return Window.focusedWindow().focusToFrontRight();
  });

}).call(this);
