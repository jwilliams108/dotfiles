<?xml version="1.0"?>
<root>
  <devicevendordef>
    <vendorname>APPLE_1</vendorname>
    <vendorid>0x004c</vendorid>
  </devicevendordef>
  <devicevendordef>
    <vendorname>APPLE_2</vendorname>
    <vendorid>0x05ac</vendorid>
  </devicevendordef>
  <deviceproductdef>
    <productname>LAPTOP_KEYBOARD</productname>
    <productid>0x0291</productid>
  </deviceproductdef>
  <deviceproductdef>
    <productname>MAGIC_KEYBOARD</productname>
    <productid>0x0267</productid>
  </deviceproductdef>
  <deviceproductdef>
    <productname>MAGIC_TRACKPAD</productname>
    <productid>0x030e</productid>
  </deviceproductdef>
  <devicevendordef>
    <vendorname>DASKEYBOARD</vendorname>
    <vendorid>0x04d9</vendorid>
  </devicevendordef>
  <deviceproductdef>
    <productname>MODEL_S_PROFESSIONAL</productname>
    <productid>0x2013</productid>
  </deviceproductdef>
  <devicevendordef>
    <vendorname>FILCO</vendorname>
    <vendorid>0x04d9</vendorid>
  </devicevendordef>
  <deviceproductdef>
    <productname>MAJESTOUCH_NINJA_TKL</productname>
    <productid>0x4545</productid>
  </deviceproductdef>
  <list>
    <item>
      <name>Bluetooth Keyboard ONLY Changes</name>
      <item>
        <name>Swap FN and F17 (left control)</name>
        <identifier>private.fn_to_f17</identifier>
        <appendix>Also sets swapped FN to HYPER (be sure to set left ctrl to F17 in Seil)</appendix>
        <device_only>DeviceVendor::APPLE_1, DeviceProduct::MAGIC_KEYBOARD</device_only>
        <autogen>
          __KeyToKey__
          KeyCode::F17,
          KeyCode::FN
        </autogen>
        <autogen>
          __KeyToKey__
          KeyCode::FN,
          KeyCode::COMMAND_L, ModifierFlag::OPTION_L | ModifierFlag::CONTROL_L
        </autogen>
      </item>
    </item>
    <item>
      <name>daskeyboard ONLY Changes</name>
      <item>
        <name>Remap FN + F11 to F11</name>
        <identifier>private.fn_f11_to_f11</identifier>
        <appendix>To allow F11 use in vim</appendix>
        <device_only>DeviceVendor::DASKEYBOARD, DeviceProduct::MODEL_S_PROFESSIONAL</device_only>
        <autogen>
          __KeyToKey__
          KeyCode::F11, ModifierFlag::FN,
          KeyCode::F11
        </autogen>
      </item>
      <item>
        <name>Remap FN + F12 to F12</name>
        <identifier>private.fnf_12_to_f12</identifier>
        <appendix>To allow F12 use in vim</appendix>
        <device_only>DeviceVendor::DASKEYBOARD, DeviceProduct::MODEL_S_PROFESSIONAL</device_only>
        <autogen>
          __KeyToKey__
          KeyCode::F12, ModifierFlag::FN,
          KeyCode::F12
        </autogen>
      </item>
      <item>
        <name>Remap control + left-command to option-shift</name>
        <identifier>private.ctrl_left_cmd_to_opt_shift</identifier>
        <appendix>Remap due to unusable left FN key</appendix>
        <device_only>DeviceVendor::DASKEYBOARD, DeviceProduct::MODEL_S_PROFESSIONAL</device_only>
        <autogen>
          __KeyToKey__
          KeyCode::CONTROL_L, ModifierFlag::COMMAND_L,
          KeyCode::OPTION_L, ModifierFlag::SHIFT_L
        </autogen>
        <autogen>
          __KeyToKey__
          KeyCode::COMMAND_L, ModifierFlag::CONTROL_L,
          KeyCode::OPTION_L, ModifierFlag::SHIFT_L
        </autogen>
      </item>
      <item>
        <name>Remap HYPER + left-command + arrow keys to option-command + arrow keys</name>
        <identifier>private.hyper_left_cmd_arrow_to_opt_cmd_arrow</identifier>
        <appendix>Remap due to unusable left FN key</appendix>
        <device_only>DeviceVendor::DASKEYBOARD, DeviceProduct::MODEL_S_PROFESSIONAL</device_only>
        <autogen>
          __KeyToKey__
          KeyCode::CURSOR_LEFT, ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::CONTROL_L,
          KeyCode::CURSOR_LEFT, ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L
        </autogen>
        <autogen>
          __KeyToKey__
          KeyCode::CURSOR_RIGHT, ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::CONTROL_L,
          KeyCode::CURSOR_RIGHT, ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L
        </autogen>
      </item>
    </item>
    <item>
      <name>General Controls</name>
      <item>
        <name>Remap left-command + control to option-shift</name>
        <identifier>private.alt_left_cmd_ctrl_to_opt_shift</identifier>
        <appendix>Alternative to option-shift</appendix>
        <autogen>
          __KeyToKey__
          KeyCode::CONTROL_L, ModifierFlag::COMMAND_L,
          KeyCode::OPTION_L, ModifierFlag::SHIFT_L
        </autogen>
        <autogen>
          __KeyToKey__
          KeyCode::COMMAND_L, ModifierFlag::CONTROL_L,
          KeyCode::OPTION_L, ModifierFlag::SHIFT_L
        </autogen>
      </item>
      <item>
        <name>Remap F17 to ctrl + option + command (HYPER)</name>
        <identifier>private.alt_left_control_to_hyper</identifier>
        <appendix>Redirect left control to HYPER when set to F17 in Seil</appendix>
        <autogen>
          __KeyToKey__
          KeyCode::F17,
          KeyCode::COMMAND_L, ModifierFlag::OPTION_L | ModifierFlag::CONTROL_L
        </autogen>
      </item>
      <item>
        <name>Remap F18 to ctrl + option + command (HYPER)</name>
        <identifier>private.left_control_to_hyper</identifier>
        <appendix>Redirect right control to HYPER when set to F18 in Seil</appendix>
        <autogen>
          --KeyToKey--
          KeyCode::F18,
          KeyCode::COMMAND_L, ModifierFlag::OPTION_L | ModifierFlag::CONTROL_L
        </autogen>
      </item>
      <item>
        <name>HYPER fixes</name>
        <identifier>private.hyper_fixes</identifier>
        <appendix>Fix various HYPER/ctrl combinations</appendix>
        <!-- fix for ctrl-c -->
        <autogen>
          --KeyToKey--
          KeyCode::C, ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::CONTROL_L,
          KeyCode::C, ModifierFlag::CONTROL_L
        </autogen>
        <!-- fix for ctrl-arrows -->
        <autogen>
          --KeyToKey--
          KeyCode::CURSOR_LEFT, ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::CONTROL_L,
          KeyCode::CURSOR_LEFT, ModifierFlag::CONTROL_L
        </autogen>
        <autogen>
          --KeyToKey--
          KeyCode::CURSOR_RIGHT, ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::CONTROL_L,
          KeyCode::CURSOR_RIGHT, ModifierFlag::CONTROL_L
        </autogen>
        <!-- fix for ctrl-numbers -->
        <autogen>
          --KeyToKey--
          KeyCode::KEY_1, ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::CONTROL_L,
          KeyCode::KEY_1, ModifierFlag::CONTROL_L
        </autogen>
        <autogen>
          --KeyToKey--
          KeyCode::KEY_2, ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::CONTROL_L,
          KeyCode::KEY_2, ModifierFlag::CONTROL_L
        </autogen>
        <autogen>
          --KeyToKey--
          KeyCode::KEY_3, ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::CONTROL_L,
          KeyCode::KEY_3, ModifierFlag::CONTROL_L
        </autogen>
        <autogen>
          --KeyToKey--
          KeyCode::KEY_4, ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::CONTROL_L,
          KeyCode::KEY_4, ModifierFlag::CONTROL_L
        </autogen>
        <!-- meta-d map for i3-like alfred menu toggle -->
        <autogen>
          --KeyToKey--
          KeyCode::D, ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::CONTROL_L,
          KeyCode::SPACE, ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::CONTROL_L
        </autogen>
      </item>
      <item>
        <name>Remap control + space to HYPER + space</name>
        <identifier>private.alt_ctrl_space_to_hyper_space</identifier>
        <appendix>Alternative to HYPER + space</appendix>
        <autogen>
          __KeyToKey__
          KeyCode::SPACE, ModifierFlag::CONTROL_L,
          KeyCode::SPACE, ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::CONTROL_L
        </autogen>
      </item>
    </item>
  </list>
  <list>
    <item>
      <name>Music Controls</name>
      <!-- FN + Fx for music controls -->
      <item>
        <name>Use FN + F5 to Music Play/Pause</name>
        <identifier>private.fn_f5_play</identifier>
        <autogen>
          __KeyToKey__
          KeyCode::F5, ModifierFlag::FN,
          ConsumerKeyCode::MUSIC_PLAY
        </autogen>
      </item>
      <item>
        <name>Use FN + F7 to Music Prev</name>
        <identifier>private.fn_f7_prev</identifier>
        <autogen>
          __KeyToKey__
          KeyCode::F7, ModifierFlag::FN,
          ConsumerKeyCode::MUSIC_PREV
        </autogen>
      </item>
      <item>
        <name>Use FN + F8 to Music Next</name>
        <identifier>private.fn_f8_next</identifier>
        <autogen>
          __KeyToKey__
          KeyCode::F8, ModifierFlag::FN,
          ConsumerKeyCode::MUSIC_NEXT
        </autogen>
      </item>
    </item>
  </list>
  <list>
    <item>
      <name>Cmus Controls</name>
      <appendix>Send commands to cmus-remote via keystrokes</appendix>
      <!-- cmus commands -->
      <vkopenurldef>
        <name>KeyCode::VK_OPEN_URL_SHELL_cmus_stop</name>
        <url type="shell">
          <![CDATA[  /usr/local/bin/cmus-remote -s  ]]>
        </url>
      </vkopenurldef>
      <vkopenurldef>
        <name>KeyCode::VK_OPEN_URL_SHELL_cmus_pause</name>
        <url type="shell">
          <![CDATA[  /usr/local/bin/cmus-remote -u  ]]>
        </url>
      </vkopenurldef>
      <vkopenurldef>
        <name>KeyCode::VK_OPEN_URL_SHELL_cmus_next</name>
        <url type="shell">
          <![CDATA[  /usr/local/bin/cmus-remote -n  ]]>
        </url>
      </vkopenurldef>
      <vkopenurldef>
        <name>KeyCode::VK_OPEN_URL_SHELL_cmus_prev</name>
        <url type="shell">
          <![CDATA[  /usr/local/bin/cmus-remote -r  ]]>
        </url>
      </vkopenurldef>
      <!-- function key combinations -->
      <item>
        <name>Use F5 to execute cmus-remote -u</name>
        <identifier>private.f5_play</identifier>
        <autogen>
          __KeyToKey__
          KeyCode::F5,
          KeyCode::VK_OPEN_URL_SHELL_cmus_pause
        </autogen>
      </item>
      <item>
        <name>Use F6 to execute cmus-remote -s</name>
        <identifier>private.f6_stop</identifier>
        <autogen>
          __KeyToKey__
          KeyCode::F6,
          KeyCode::VK_OPEN_URL_SHELL_cmus_stop
        </autogen>
      </item>
      <item>
        <name>Use F7 to execute cmus-remote -r</name>
        <identifier>private.f7_prev</identifier>
        <autogen>
          __KeyToKey__
          KeyCode::F7,
          KeyCode::VK_OPEN_URL_SHELL_cmus_prev
        </autogen>
      </item>
      <item>
        <name>Use F8 to execute cmus-remote -n</name>
        <identifier>private.f8_next</identifier>
        <autogen>
          __KeyToKey__
          KeyCode::F8,
          KeyCode::VK_OPEN_URL_SHELL_cmus_next
        </autogen>
      </item>
      <!-- left ctrl + cmd + option + arrow key combinations -->
      <item>
        <name>Use left-option + left arrow to execute cmus-remote -r</name>
        <identifier>private.left_option_left_arrow</identifier>
        <autogen>
          __KeyToKey__
          KeyCode::CURSOR_LEFT, ModifierFlag::OPTION_L | ModifierFlag::NONE,
          KeyCode::VK_OPEN_URL_SHELL_cmus_prev
        </autogen>
      </item>
      <item>
        <name>Use left-option + enter to execute cmus-remote -u</name>
        <identifier>private.left_option_enter</identifier>
        <autogen>
          __KeyToKey__
          KeyCode::RETURN, ModifierFlag::OPTION_L | ModifierFlag::NONE,
          KeyCode::VK_OPEN_URL_SHELL_cmus_pause
        </autogen>
      </item>
      <item>
        <name>Use left-option + right arrow to execute cmus-remote -n</name>
        <identifier>private.left_option_right_arrow</identifier>
        <autogen>
          __KeyToKey__
          KeyCode::CURSOR_RIGHT, ModifierFlag::OPTION_L | ModifierFlag::NONE,
          KeyCode::VK_OPEN_URL_SHELL_cmus_next
        </autogen>
      </item>
    </item>
  </list>
</root>
